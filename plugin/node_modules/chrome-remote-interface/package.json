{
  "name": "chrome-remote-interface",
  "author": {
    "name": "Andrea Cardaci",
    "email": "cyrus.and@gmail.com"
  },
  "contributors": [
    {
      "name": "Andrey Sidorov",
      "email": "sidoares@yandex.ru"
    }
  ],
  "description": "Chrome Remote Debugging Protocol interface",
  "keywords": [
    "chrome",
    "remote",
    "debug",
    "interface"
  ],
  "homepage": "https://github.com/cyrus-and/chrome-remote-interface",
  "version": "0.4.1",
  "repository": {
    "type": "git",
    "url": "git://github.com/cyrus-and/chrome-remote-interface.git"
  },
  "bugs": {
    "url": "http://github.com/cyrus-and/chrome-remote-interface/issues"
  },
  "dependencies": {
    "ws": "0.4.x",
    "commander": "2.1.x"
  },
  "bin": {
    "chrome-repl": "./bin/repl.js"
  },
  "devDependencies": {
    "mocha": "*"
  },
  "scripts": {
    "test": "make test"
  },
  "readme": "chrome-remote-interface\n=======================\n\n[Remote Debugging Protocol][1] interface that helps to instrument Chrome by\nproviding a simple abstraction of the two main objects exposed by the protocol\nin a Node.js fashion: commands and notifications.\n\nInstallation\n------------\n\n    npm install chrome-remote-interface\n\nChrome setup\n------------\n\nChrome needs to be started with the `--remote-debugging-port=<port>` option to\nenable the [Remote Debugging Protocol][1], for example:\n\n    google-chrome --remote-debugging-port=9222\n\nSample API usage\n----------------\n\nThe following snippet loads `https://github.com` and dumps every request made.\n\n```javascript\nvar Chrome = require('chrome-remote-interface');\nChrome(function (chrome) {\n    with (chrome) {\n        on('Network.requestWillBeSent', function (message) {\n            console.log(message.request.url);\n        });\n        on('Page.loadEventFired', close);\n        Network.enable();\n        Page.enable();\n        Page.navigate({'url': 'https://github.com'});\n    }\n}).on('error', function () {\n    console.error('Cannot connect to Chrome');\n});\n```\n\nREPL interface and embedded documentation\n-----------------------------------------\n\nThis module comes with a REPL interface that can be used to interactively\ncontrol Chrome (run with `--help` to display the list of available options). It\nsupports command execution and event binding, see the documentation for\n`chrome.Domain.method([params], [callback])` and\n`chrome.Domain.event(callback)`. Here's a sample session:\n\n```javascript\nchrome> Network.enable()\nchrome> Network.requestWillBeSent(console.log)\nchrome> Page.navigate({url: 'https://github.com'})\n```\n\nUsing the provided `help` field it's possible to obtain information on the\nevents and methods available through the [Remote Debugging Protocol][1]. For\nexample to learn how to call `Page.navigate` type:\n\n```javascript\nchrome> Page.navigate.help\n{ name: 'navigate',\n  parameters:\n   [ { name: 'url',\n       type: 'string',\n       description: 'URL to navigate the page to.' } ],\n  description: 'Navigates current page to the given URL.' }\n```\n\nFor what concerns the types instead, just type its name:\n\n```javascript\nchrome> Network.Timestamp\n{ id: 'Timestamp',\n  type: 'number',\n  description: 'Number of seconds since epoch.' }\n```\n\nAPI\n---\n\n### module([options], [callback])\n\nConnects to a remote instance of Chrome using the [Remote Debugging\nProtocol][1].\n\n`options` is an object with the following optional properties:\n\n- `host`: [Remote Debugging Protocol][1] host. Defaults to `localhost`;\n- `port`: [Remote Debugging Protocol][1] port. Defaults to `9222`;\n- `chooseTab`: callback used to determine which remote tab attach to. Takes the\n  array returned by `http://host:port/json` containing the tab list and must\n  return the numeric index of a tab. Defaults to a function that returns the\n  active one (`function (tabs) { return 0; }`).\n\n`callback` is a listener automatically added to the `connect` event of the\nreturned `EventEmitter`.\n\nReturns an `EventEmitter` that supports the following events:\n\n#### Event: 'connect'\n\n    function (chrome) {}\n\nEmitted when the connection to Chrome is established.\n\n`chrome` is an instance of the `Chrome` class.\n\n#### Event: 'error'\n\n    function (err) {}\n\nEmitted if `http://host:port/json` can't be reached or if it's not possible to\nconnect to Chrome's remote debugging WebSocket.\n\n`err` is an instance of `Error`.\n\n### module.listTabs([options], callback)\n\nRequest the list of the available open tabs of the remote Chrome instance.\n\n`options` is an object with the following optional properties:\n\n- `host`: [Remote Debugging Protocol][1] host. Defaults to `localhost`;\n- `port`: [Remote Debugging Protocol][1] port. Defaults to `9222`.\n\n`callback` is executed when the list is correctly received, it gets the\nfollowing arguments:\n\n- `err`: a `Error` object indicating the success status;\n- `tabs`: the array returned by `http://host:port/json` containing the tab list.\n\nFor example:\n\n```javascript\nvar Chrome = require('chrome-remote-interface');\nChrome.listTabs(function (err, tabs) {\n    if (!err) {\n        console.log(tabs);\n    }\n});\n```\n\n### Class: Chrome\n\n#### Event: 'event'\n\n    function (message) {}\n\nEmitted when Chrome sends a notification through the WebSocket.\n\n`message` is the object received, it has the following properties:\n\n- `method`: a string describing the message.\n- `params`: an object containing the payload.\n\nRefer to the [Remote Debugging Protocol specifications][1] for more information.\n\n#### Event: method\n\n    function (params) {}\n\nEmitted when Chrome sends a notification classified as `method` through the\nWebSocket.\n\n`params` is an object containing the payload.\n\nThis is just a utility event that allows to easily filter out specific\nnotifications (see the documentation of `event`), for example:\n\n    chrome.on('Network.requestWillBeSent', console.log);\n\n#### chrome.send(method, [params], [callback])\n\nIssue a command to Chrome.\n\n`method` is a string describing the message.\n\n`params` is an object containing the payload.\n\n`callback` is executed when Chrome sends a response to this command, it gets the\nfollowing arguments:\n\n- `error`: a boolean value indicating the success status, as reported by Chrome;\n- `response`: an object containing either the response sent from Chrome\n  (`result` field, if `error === false`) or the indication of the error (`error`\n  field, if `error === true`).\n\nNote that the field `id` mentioned in the [Remote Debugging Protocol\nspecifications][1] is managed internally and it's not exposed to the user.\n\n#### chrome.Domain.method([params], [callback])\n\nJust a shorthand for:\n\n    chrome.send('Domain.method', params, callback);\n\nFor example:\n\n    chrome.Page.navigate({'url': 'https://github.com'});\n\n#### chrome.Domain.event(callback)\n\nJust a shorthand for:\n\n    chrome.on('Domain.event', callback);\n\nFor example:\n\n    chrome.Network.requestWillBeSent(console.log);\n\n#### chrome.close()\n\nClose the connection to Chrome.\n\nContributors\n------------\n\n- [Andrey Sidorov](https://github.com/sidorares)\n\nResources\n---------\n\n- [Chrome Developer Tools: Remote Debugging Protocol v1.1][1]\n\n[1]: https://developers.google.com/chrome-developer-tools/docs/protocol/1.1/\n",
  "readmeFilename": "README.md",
  "_id": "chrome-remote-interface@0.4.1",
  "_from": "chrome-remote-interface@"
}
